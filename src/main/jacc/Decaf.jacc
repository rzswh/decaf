// Decaf grammar

%package decaf.frontend.parsing

%{
import decaf.frontend.tree.Tree.*;

import java.util.Optional;
%}

%class DecafJaccParser
%extends JaccParser.BaseParser
%interface JaccTokens
%next nextToken()
%get token
%semantic SemValue : semValue

%token VOID         BOOL        INT         STRING      CLASS
%token NULL         EXTENDS     THIS        WHILE       FOR
%token IF           ELSE        RETURN      BREAK       NEW
%token PRINT        READ_INTEGER            READ_LINE
%token BOOL_LIT     INT_LIT     STRING_LIT  ABSTRACT
%token DOUBLE_ARROW FUN         VAR

%nonassoc DOUBLE_ARROW
%left OR
%token DOUBLE_ARROW FUN         VAR

%nonassoc DOUBLE_ARROW
%left OR
%left AND
%nonassoc EQUAL NOT_EQUAL
%nonassoc LESS_EQUAL GREATER_EQUAL '<' '>'
%left  '+' '-'
%left  '*' '/' '%'
%nonassoc UMINUS '!'
                    {
                        $$ = svClasses($1.clazz);
                    }
                ;

ClassDef        :   CLASS Id ExtendsClause '{' FieldList '}'
                    {
                        $$ = svClass(new ClassDef(false, $2.id, Optional.ofNullable($3.id), $5.fieldList, $1.pos));
                    }
                |   ABSTRACT CLASS Id ExtendsClause '{' FieldList '}'
                    {
                        $$ = svClass(new ClassDef(true, $3.id, Optional.ofNullable($4.id), $6.fieldList, $2.pos));
                    }
                ;

ExtendsClause   :   EXTENDS Id
                    {
                        $$ = $2;
                    }
                |   /* empty */
                    {
                        $$ = svId(null);
                        $$ = svClass(new ClassDef(false, $2.id, Optional.ofNullable($3.id), $5.fieldList, $1.pos));
                    }
                |   ABSTRACT CLASS Id ExtendsClause '{' FieldList '}'
                    {
                        $$ = svClass(new ClassDef(true, $3.id, Optional.ofNullable($4.id), $6.fieldList, $2.pos));
                    {
                        $$ = $1;
                        $$.fieldList.add($2.field);
                    }
                |   /* empty */
                    {
                        $$ = svFields();
                    }
                ;

                        $$ = svClass(new ClassDef(false, $2.id, Optional.ofNullable($3.id), $5.fieldList, $1.pos));
                    }
                |   ABSTRACT CLASS Id ExtendsClause '{' FieldList '}'
                    {
                        $$ = svClass(new ClassDef(true, $3.id, Optional.ofNullable($4.id), $6.fieldList, $2.pos));
                    }
                |   STATIC Type Id '(' VarList ')' Block
                    {
                        $$ = svField(new MethodDef(false, true, $3.id, $2.type, $5.varList, $7.block, $3.pos));
                    }
                |   Type Id '(' VarList ')' Block
                    {
                        $$ = svField(new MethodDef(false, false, $2.id, $1.type, $4.varList, $6.block, $2.pos));
                    }
                ;

VarList         :   VarList1
                    {
                        $$ = $1;
                    }
                |   /* empty */
MethodDef       :   ABSTRACT Type Id '(' VarList ')' ';'
                    {
                        $$ = svField(new MethodDef(true, false, $3.id, $2.type, $5.varList, null, $3.pos));
                    }
                |   STATIC Type Id '(' VarList ')' Block
                    {
                        $$ = svField(new MethodDef(false, true, $3.id, $2.type, $5.varList, $7.block, $3.pos));
                    }
                |   Type Id '(' VarList ')' Block
                    {
                        $$ = svField(new MethodDef(false, false, $2.id, $1.type, $4.varList, $6.block, $2.pos));
                    }
                |   BOOL
                    {
                        $$ = svType(new TBool($1.pos));
                    }
                |   STRING
                    {
                        $$ = svType(new TString($1.pos));
MethodDef       :   ABSTRACT Type Id '(' VarList ')' ';'
                    {
                        $$ = svField(new MethodDef(true, false, $3.id, $2.type, $5.varList, null, $3.pos));
                    }
                |   STATIC Type Id '(' VarList ')' Block
                    {
                        $$ = svField(new MethodDef(false, true, $3.id, $2.type, $5.varList, $7.block, $3.pos));
                    }
                |   Type Id '(' VarList ')' Block
                    {
                        $$ = svField(new MethodDef(false, false, $2.id, $1.type, $4.varList, $6.block, $2.pos));
                        $$ = svTypes($1.type);
                    }
                |   TypeList ',' Type
                    {
                        $$ = $1;
                        $1.typeList.add($3.type);
                    }
                |   /* empty */
                    {
                        $$ = svTypes();
                    }
                ;

// Statements

Stmt            :   Block
                    {
                        $$ = svStmt($1.block);
                    }
                |   SimpleStmt ';'
                    {
                |   Type '(' TypeList ')'
                    {
                        $$ = svType(new TLambda($1.type, $3.typeList, $1.type.pos));
                    }
                ;

TypeList        :   Type
                    {
                        $$ = svTypes($1.type);
                    }
                |   TypeList ',' Type
                    {
                        $$ = $1;
                        $1.typeList.add($3.type);
                    }
                |   /* empty */
                    {
                        $$ = svTypes();
                    }
                        $$ = svStmt(new Break($1.pos));
                    }
                |   RETURN ExprOpt ';'
                    {
                        $$ = svStmt(new Return(Optional.ofNullable($2.expr), $1.pos));
                    }
                |   PRINT '(' ExprList ')' ';'
                    {
                        $$ = svStmt(new Print($3.exprList, $1.pos));
                    }
                |   Type '(' TypeList ')'
                    {
                        $$ = svType(new TLambda($1.type, $3.typeList, $1.type.pos));
                    }
                ;

TypeList        :   Type
                    {
                        $$ = svTypes($1.type);
                    }
                |   TypeList ',' Type
                    {
                        $$ = $1;
                        $1.typeList.add($3.type);
                    }
                |   /* empty */
                    {
                        $$ = svTypes();
                    }
                    }
                |   LValue '=' Expr
                    {
                        $$ = svStmt(new Assign($1.lValue, $3.expr, $2.pos));
                    }
                |   Expr
                    {
                        $$ = svStmt(new ExprEval($1.expr, $1.expr.pos));
                    }
                |   /* empty */
                    {
                        $$ = svStmt(null);
                    }
                |   VAR Id '=' Expr
                    {
                        $$ = svStmt(new LocalVarDef(null, $2.id, $3.pos, Optional.ofNullable($4.expr), $2.pos));
                    }
                ;

Initializer     :   '=' Expr
                    {
                        $$ = svExpr($2.expr);
                        $$.pos = $1.pos;
                    }
                |   /* empty */
                    {
                        $$ = svExpr(null);
                    }
                ;

ElseClause      :   ELSE Stmt
                    {
                        $$ = $2;
                    }
                |   /* empty */             %prec EMPTY
                    {
                        $$ = svStmt(null);
                    }
                ;

ExprOpt         :   Expr
                    {
                        $$ = $1;
                    }
                |   /* empty */
                |   VAR Id '=' Expr
                    {
                        $$ = svStmt(new LocalVarDef(null, $2.id, $3.pos, Optional.ofNullable($4.expr), $2.pos));
                    }
Expr            :   Literal
                    {
                        $$ = $1;
                    }
                |   THIS
                    {
                        $$ = svExpr(new This($1.pos));
                    }
                |   LValue
                    {
                        $$ = svExpr($1.lValue);
                    }
                |   Expr '+' Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.ADD, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr '-' Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.SUB, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr '*' Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.MUL, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr '/' Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.DIV, $1.expr, $3.expr, $2.pos));
                    }
                |   VAR Id '=' Expr
                    {
                        $$ = svStmt(new LocalVarDef(null, $2.id, $3.pos, Optional.ofNullable($4.expr), $2.pos));
                    }
                    }
                |   Expr NOT_EQUAL Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.NE, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr '<' Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.LT, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr '>' Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.GT, $1.expr, $3.expr, $2.pos));
                        $$ = svExpr(new Binary(BinaryOp.GE, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr AND Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.AND, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr OR Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.OR, $1.expr, $3.expr, $2.pos));
                    }
                |   '(' Expr ')'
                    {
                        $$ = $2;
                    }
                |   '-' Expr                %prec UMINUS
                    {
                        $$ = svExpr(new Unary(UnaryOp.NEG, $2.expr, $1.pos));
                    }
                |   '!' Expr
                    {
                        $$ = svExpr(new Unary(UnaryOp.NOT, $2.expr, $1.pos));
                    }
                |   READ_INTEGER '(' ')'
                    {
                        $$ = svExpr(new ReadInt($1.pos));
                    }
                |   READ_LINE '(' ')'
                    {
                        $$ = svExpr(new ReadLine($1.pos));
                    }
                |   NEW Id '(' ')'
                    {
                        $$ = svExpr(new NewClass($2.id, $1.pos));
                    }
                |   NEW Type '[' Expr ']'
                |   '(' CLASS Id ')' Expr
                    {
                        $$ = svExpr(new ClassCast($5.expr, $3.id, $5.expr.pos));
                    }
                |   FUN '(' VarList ')' DOUBLE_ARROW Expr
                    {
                        $$ = svExpr(new LambdaExpr($3.varList, $6.expr, $1.pos));
                    }
                |   FUN '(' VarList ')' Block
                    {
                        $$ = svExpr(new LambdaBlock($3.varList, $5.block, $1.pos));
                    }
                |   Receiver Id
                    {
                        $$ = svExpr(new VarSel(Optional.ofNullable($1.expr), $2.id, $2.pos));
                    }
                |   Expr '(' ExprList ')'
                    {
                        $$ = svExpr(new Call($1.expr, $3.exprList, $2.pos));
                    }
                ;

Literal         :   INT_LIT
                    {
                        $$ = svExpr(new IntLit($1.intVal, $1.pos));
                    }
                |   BOOL_LIT
                    {
                        $$ = svExpr(new BoolLit($1.boolVal, $1.pos));
                    }
                |   STRING_LIT
                    {
                        $$ = svExpr(new StringLit($1.strVal, $1.pos));
                    }
                |   NULL
                    {
                        $$ = svExpr(new NullLit($1.pos));
                    }
                ;

LValue          :   Receiver Id
                    {
                |   '(' CLASS Id ')' Expr
                    {
                        $$ = svExpr(new ClassCast($5.expr, $3.id, $5.expr.pos));
                    }
                |   FUN '(' VarList ')' DOUBLE_ARROW Expr
                    {
                        $$ = svExpr(new LambdaExpr($3.varList, $6.expr, $1.pos));
                    }
                |   FUN '(' VarList ')' Block
                    {
                        $$ = svExpr(new LambdaBlock($3.varList, $5.block, $1.pos));
                    }
                |   Receiver Id
                    {
                        $$ = svExpr(new VarSel(Optional.ofNullable($1.expr), $2.id, $2.pos));
                    }
                |   Expr '(' ExprList ')'
                    {
                        $$ = svExpr(new Call($1.expr, $3.exprList, $2.pos));
                    }

ExprList1       :   ExprList1 ',' Expr
                    {
                        $$ = $1;
                        $$.exprList.add($3.expr);
                    }
                |   Expr
                    {
                        $$ = svExprs($1.expr);
                    }
                ;

// identifier

Id              :   IDENTIFIER
                    {
                        $$ = svId(new Id($1.strVal, $1.pos));
                    }
                ;

%%
                |   '(' CLASS Id ')' Expr
                    {
                        $$ = svExpr(new ClassCast($5.expr, $3.id, $5.expr.pos));
                    }
                |   FUN '(' VarList ')' DOUBLE_ARROW Expr
                    {
                        $$ = svExpr(new LambdaExpr($3.varList, $6.expr, $1.pos));
                    }
                |   FUN '(' VarList ')' Block
                    {
                        $$ = svExpr(new LambdaBlock($3.varList, $5.block, $1.pos));
                    }
                |   Receiver Id
                    {
                        $$ = svExpr(new VarSel(Optional.ofNullable($1.expr), $2.id, $2.pos));
                    }
                |   Expr '(' ExprList ')'
                    {
                        $$ = svExpr(new Call($1.expr, $3.exprList, $2.pos));
                    }
